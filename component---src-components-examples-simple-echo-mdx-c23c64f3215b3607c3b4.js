(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{DphZ:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return d}));var o=t("Fcif"),c=t("+I+c"),i=(t("mXGw"),t("/FXl")),a=t("TjRS"),r=t("ZFoC"),s=t("MYfA"),p=t("zydn"),u=t("J6+e"),l=(t("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/examples/SimpleEcho.mdx"}});var b={_frontmatter:l},m=a.a;function d(e){var n,t=e.components,d=Object(c.a)(e,["components"]);return Object(i.b)(m,Object(o.a)({},b,d,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"Throughout these examples we will assume you've already gone through the process of installing ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"http://wiki.ros.org/noetic/Installation/Ubuntu"}),"ROS")," or ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://index.ros.org/doc/ros2/Installation/Foxy/"}),"ROS2")," and have a ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/RobotWebTools/rosbridge_suite"}),"ROS websocket server")," running and available to connect with."),Object(i.b)("p",null,"The first step in connecting ROS with a website will always be establishing a connection. With ",Object(i.b)("inlineCode",{parentName:"p"},"react-ros"),", we make this easy by providing a very simple and easy-to-use context provider called ",Object(i.b)("inlineCode",{parentName:"p"},"useROS")," to get you started."),Object(i.b)("h2",{id:"connect-to-ros"},"Connect to ROS"),Object(i.b)("p",null,"Here is an example of how you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"useROS")," component and connect your website to your robot!  In this example we provide a ",Object(i.b)("inlineCode",{parentName:"p"},"ToggleConnect")," component that uses the ",Object(i.b)("inlineCode",{parentName:"p"},"useROS")," context provider to quickly and easily integrate ROS into any button or status indicator you could want to use."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'import React from \'react\'\nimport { useROS } from \'../ROS\'\n\nfunction ToggleConnect() {\n  const { isConnected, topics, url, changeUrl, toggleConnection } = useROS();\n\n  return (\n    <div>\n      <p>\n        <b>Simple connect:  </b><button onClick={ toggleConnection }>Toggle Connect</button>  <br />\n        <b>ROS url input:  </b><input name="urlInput" defaultValue={ url } onChange={event => changeUrl(event.target.value)} />  <br />\n        <b>ROS url to connect to:  </b> {url}  <br />\n        <b>Status of ROS:</b> { isConnected ? "connected" : "not connected" }   <br />\n        <b>Topics detected:</b><br />\n        { topics.map((topic, i) => <li key={i}>    {topic.path}</li> )}\n      </p>\n    </div>\n  );\n}\n\nexport default ToggleConnect;\n')),Object(i.b)("h2",{id:"toggleconnect-in-use"},"ToggleConnect in use"),Object(i.b)("p",null,"To use the simple ",Object(i.b)("inlineCode",{parentName:"p"},"ToggleConnect")," component we made above, wrap it in the provided ",Object(i.b)("inlineCode",{parentName:"p"},"ROS")," context provider component from ",Object(i.b)("inlineCode",{parentName:"p"},"react-ros")," and everything should just work. Go ahead and try it live below on your robot!"),Object(i.b)("p",null,"Here is a simple echo example that prints out messages on a specific topic to the console:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'// EchoTopic.js\nimport React, { useState, useEffect } from \'react\'\nimport { useROS } from \'react-ros\'\n\nvar listener = null;\n\nfunction EchoTopic() {\n  const { createListener, topics } = useROS();\n  const [ topic, setTopic ] = useState(\'/\');\n  const [ queue, setQueue ] = useState(0);\n  const [ compression, setCompression ] = useState(\'none\');\n\n  useEffect(() => {\n    handleTopic(topic);\n  });\n\n  const unsubscribe = () => {\n    if (listener) {\n      console.log("Unsubscribing");\n      listener.unsubscribe();\n    }\n  }\n\n  const handleTopic = (topicInput) => {\n    if (topic !== topicInput) {\n      setTopic(topicInput);\n      unsubscribe();\n      return;\n    }\n\n    unsubscribe();\n    listener = null;\n\n    for (var i in topics) {\n      if (topics[i].path == topicInput) {\n        listener = createListener( topics[i].path,\n                                   topics[i].msgType,\n                                   Number(queue),\n                                   compression);\n        break;\n      }\n    }\n\n    if (listener) {\n      console.log("Subscribing to messages...");\n      listener.subscribe(handleMsg);\n    } else {\n      console.log("Topic \'" + topic + "\' not found...make sure to input the full topic path - including the leading \'/\'");\n    }\n  }\n\n  const handleQueue = (queueInput) => {\n    setQueue(queueInput);\n  }\n\n  const handleCompression = (compInput) => {\n    setCompression(compInput);\n  }\n\n  const handleMsg = (msg) => {\n    console.log(msg);\n  }\n\n  return (\n    <div>\n      <b>Message Queue Length:  </b><input name="queueInput" defaultValue={ queue } onChange={event => handleQueue(event.target.value)} />  <br />\n      <b>Compression:  </b><input name="compInput" defaultValue={ compression } onChange={event => handleCompression(event.target.value)} />  <br />\n      <b>Topic to echo:  </b><input name="topicInput" defaultValue={ topic } onChange={event => handleTopic(event.target.value)} />  <br />\n    </div>\n  );\n}\n\nexport default EchoTopic;\n')),Object(i.b)("p",null,"And then we use this EchoTopic component within the ROS context provider like below."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," not shown in the code below is ",Object(i.b)("inlineCode",{parentName:"p"},"import { ROS } from 'react-ros'")," and ",Object(i.b)("inlineCode",{parentName:"p"},"import EchoTopic from './EchoTopic'")," at the top of the file. This is needed in order to use the ",Object(i.b)("inlineCode",{parentName:"p"},"ROS")," context provider component and the ",Object(i.b)("inlineCode",{parentName:"p"},"EchoTopic")," component."),Object(i.b)(r.c,{__position:0,__code:"<ROS>\n  <ToggleConnect />\n  <EchoTopic />\n</ROS>",__scope:(n={props:d,DefaultLayout:a.a,Playground:r.c,ROS:s.a,ToggleConnect:p.a,EchoTopic:u.a},n.DefaultLayout=a.a,n._frontmatter=l,n),mdxType:"Playground"},Object(i.b)(s.a,{mdxType:"ROS"},Object(i.b)(p.a,{mdxType:"ToggleConnect"}),Object(i.b)(u.a,{mdxType:"EchoTopic"}))),Object(i.b)("h2",{id:"subscribe-to-a-topic"},"Subscribe to a topic"),Object(i.b)("p",null,"Taking the toggle example even further - once connected, you should be able to subscribe to a topic and print out messages as they are received."))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/examples/SimpleEcho.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-examples-simple-echo-mdx-c23c64f3215b3607c3b4.js.map