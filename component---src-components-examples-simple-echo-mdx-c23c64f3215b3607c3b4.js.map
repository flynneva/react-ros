{"version":3,"sources":["webpack:///../src/components/examples/SimpleEcho.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","ROS","ToggleConnect","EchoTopic","isMDXComponent"],"mappings":"uSAYaA,G,UAAe,S,wNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,uHAAsG,6BAAGC,WAAW,KAAQ,CACxH,KAAQ,mDAD0F,OAAtG,OAEwB,6BAAGA,WAAW,KAAQ,CAC1C,KAAQ,sDADY,QAFxB,eAIiC,6BAAGA,WAAW,KAAQ,CACnD,KAAQ,qDADqB,wBAJjC,2CAOA,uHAAsG,0BAAYA,WAAW,KAAvB,aAAtG,0FAAsP,0BAAYA,WAAW,KAAvB,UAAtP,wBACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,kEAAiD,0BAAYA,WAAW,KAAvB,UAAjD,oFAAwL,0BAAYA,WAAW,KAAvB,iBAAxL,4BAA8Q,0BAAYA,WAAW,KAAvB,UAA9Q,oHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,swBAwBL,iBAAQ,CACN,GAAM,wBADR,wBAGA,0CAAyB,0BAAYA,WAAW,KAAvB,iBAAzB,qDAAwI,0BAAYA,WAAW,KAAvB,OAAxI,oCAA4N,0BAAYA,WAAW,KAAvB,aAA5N,mFACA,mHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ghEA4EL,6GACA,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,mCAAgF,0BAAYA,WAAW,KAAvB,mCAAhF,QAAoK,0BAAYA,WAAW,KAAvB,uCAApK,+DAAmT,0BAAYA,WAAW,KAAvB,OAAnT,uCAA0Y,0BAAYA,WAAW,KAAvB,aAA1Y,eAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,sDAAuDC,SAAO,GAC/FL,QACAH,kBACAS,eACAC,QACAC,kBACAC,eAN+F,gBAO/FZ,IAP+F,EAQ/FH,eAR+F,GAS9FO,QAAQ,cACb,YAAC,IAAD,CAAKA,QAAQ,OACX,YAAC,IAAD,CAAeA,QAAQ,kBACvB,YAAC,IAAD,CAAWA,QAAQ,gBAGnB,iBAAQ,CACN,GAAM,wBADR,wBAGA,+K,sNAKJH,EAAWY,gBAAiB","file":"component---src-components-examples-simple-echo-mdx-c23c64f3215b3607c3b4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ros/react-ros/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { ROS } from '../ROS';\nimport ToggleConnect from './ToggleConnect';\nimport EchoTopic from './EchoTopic';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`Throughout these examples we will assume you've already gone through the process of installing `}<a parentName=\"p\" {...{\n        \"href\": \"http://wiki.ros.org/noetic/Installation/Ubuntu\"\n      }}>{`ROS`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://index.ros.org/doc/ros2/Installation/Foxy/\"\n      }}>{`ROS2`}</a>{` and have a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/RobotWebTools/rosbridge_suite\"\n      }}>{`ROS websocket server`}</a>{` running and available to connect with.`}</p>\n    <p>{`The first step in connecting ROS with a website will always be establishing a connection. With `}<inlineCode parentName=\"p\">{`react-ros`}</inlineCode>{`, we make this easy by providing a very simple and easy-to-use context provider called `}<inlineCode parentName=\"p\">{`useROS`}</inlineCode>{` to get you started.`}</p>\n    <h2 {...{\n      \"id\": \"connect-to-ros\"\n    }}>{`Connect to ROS`}</h2>\n    <p>{`Here is an example of how you can use the `}<inlineCode parentName=\"p\">{`useROS`}</inlineCode>{` component and connect your website to your robot!  In this example we provide a `}<inlineCode parentName=\"p\">{`ToggleConnect`}</inlineCode>{` component that uses the `}<inlineCode parentName=\"p\">{`useROS`}</inlineCode>{` context provider to quickly and easily integrate ROS into any button or status indicator you could want to use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react'\nimport { useROS } from '../ROS'\n\nfunction ToggleConnect() {\n  const { isConnected, topics, url, changeUrl, toggleConnection } = useROS();\n\n  return (\n    <div>\n      <p>\n        <b>Simple connect:  </b><button onClick={ toggleConnection }>Toggle Connect</button>  <br />\n        <b>ROS url input:  </b><input name=\"urlInput\" defaultValue={ url } onChange={event => changeUrl(event.target.value)} />  <br />\n        <b>ROS url to connect to:  </b> {url}  <br />\n        <b>Status of ROS:</b> { isConnected ? \"connected\" : \"not connected\" }   <br />\n        <b>Topics detected:</b><br />\n        { topics.map((topic, i) => <li key={i}>    {topic.path}</li> )}\n      </p>\n    </div>\n  );\n}\n\nexport default ToggleConnect;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"toggleconnect-in-use\"\n    }}>{`ToggleConnect in use`}</h2>\n    <p>{`To use the simple `}<inlineCode parentName=\"p\">{`ToggleConnect`}</inlineCode>{` component we made above, wrap it in the provided `}<inlineCode parentName=\"p\">{`ROS`}</inlineCode>{` context provider component from `}<inlineCode parentName=\"p\">{`react-ros`}</inlineCode>{` and everything should just work. Go ahead and try it live below on your robot!`}</p>\n    <p>{`Here is a simple echo example that prints out messages on a specific topic to the console:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// EchoTopic.js\nimport React, { useState, useEffect } from 'react'\nimport { useROS } from 'react-ros'\n\nvar listener = null;\n\nfunction EchoTopic() {\n  const { createListener, topics } = useROS();\n  const [ topic, setTopic ] = useState('/');\n  const [ queue, setQueue ] = useState(0);\n  const [ compression, setCompression ] = useState('none');\n\n  useEffect(() => {\n    handleTopic(topic);\n  });\n\n  const unsubscribe = () => {\n    if (listener) {\n      console.log(\"Unsubscribing\");\n      listener.unsubscribe();\n    }\n  }\n\n  const handleTopic = (topicInput) => {\n    if (topic !== topicInput) {\n      setTopic(topicInput);\n      unsubscribe();\n      return;\n    }\n\n    unsubscribe();\n    listener = null;\n\n    for (var i in topics) {\n      if (topics[i].path == topicInput) {\n        listener = createListener( topics[i].path,\n                                   topics[i].msgType,\n                                   Number(queue),\n                                   compression);\n        break;\n      }\n    }\n\n    if (listener) {\n      console.log(\"Subscribing to messages...\");\n      listener.subscribe(handleMsg);\n    } else {\n      console.log(\"Topic '\" + topic + \"' not found...make sure to input the full topic path - including the leading '/'\");\n    }\n  }\n\n  const handleQueue = (queueInput) => {\n    setQueue(queueInput);\n  }\n\n  const handleCompression = (compInput) => {\n    setCompression(compInput);\n  }\n\n  const handleMsg = (msg) => {\n    console.log(msg);\n  }\n\n  return (\n    <div>\n      <b>Message Queue Length:  </b><input name=\"queueInput\" defaultValue={ queue } onChange={event => handleQueue(event.target.value)} />  <br />\n      <b>Compression:  </b><input name=\"compInput\" defaultValue={ compression } onChange={event => handleCompression(event.target.value)} />  <br />\n      <b>Topic to echo:  </b><input name=\"topicInput\" defaultValue={ topic } onChange={event => handleTopic(event.target.value)} />  <br />\n    </div>\n  );\n}\n\nexport default EchoTopic;\n`}</code></pre>\n    <p>{`And then we use this EchoTopic component within the ROS context provider like below.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` not shown in the code below is `}<inlineCode parentName=\"p\">{`import { ROS } from 'react-ros'`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`import EchoTopic from './EchoTopic'`}</inlineCode>{` at the top of the file. This is needed in order to use the `}<inlineCode parentName=\"p\">{`ROS`}</inlineCode>{` context provider component and the `}<inlineCode parentName=\"p\">{`EchoTopic`}</inlineCode>{` component.`}</p>\n\n\n    <Playground __position={0} __code={'<ROS>\\n  <ToggleConnect />\\n  <EchoTopic />\\n</ROS>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      ROS,\n      ToggleConnect,\n      EchoTopic,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ROS mdxType=\"ROS\">\n    <ToggleConnect mdxType=\"ToggleConnect\" />\n    <EchoTopic mdxType=\"EchoTopic\" />\n  </ROS>\n    </Playground>\n    <h2 {...{\n      \"id\": \"subscribe-to-a-topic\"\n    }}>{`Subscribe to a topic`}</h2>\n    <p>{`Taking the toggle example even further - once connected, you should be able to subscribe to a topic and print out messages as they are received.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}